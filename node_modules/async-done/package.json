{
  "_args": [
    [
      {
        "raw": "async-done@^1.2.0",
        "scope": null,
        "escapedName": "async-done",
        "name": "async-done",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "/Users/winwanwon/PetMe-CPE333/node_modules/@ionic/cli-plugin-ionic1/node_modules/glob-watcher"
    ]
  ],
  "_from": "async-done@>=1.2.0 <2.0.0",
  "_id": "async-done@1.2.2",
  "_inCache": true,
  "_location": "/async-done",
  "_nodeVersion": "0.10.41",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/async-done-1.2.2.tgz_1466405294490_0.8290357626974583"
  },
  "_npmUser": {
    "name": "phated",
    "email": "blaine.bublitz@gmail.com"
  },
  "_npmVersion": "2.15.2",
  "_phantomChildren": {
    "wrappy": "1.0.2"
  },
  "_requested": {
    "raw": "async-done@^1.2.0",
    "scope": null,
    "escapedName": "async-done",
    "name": "async-done",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@ionic/cli-plugin-ionic1/glob-watcher"
  ],
  "_resolved": "https://registry.npmjs.org/async-done/-/async-done-1.2.2.tgz",
  "_shasum": "ba4280da55a16e15f4bb8bf3a844a91878740e31",
  "_shrinkwrap": null,
  "_spec": "async-done@^1.2.0",
  "_where": "/Users/winwanwon/PetMe-CPE333/node_modules/@ionic/cli-plugin-ionic1/node_modules/glob-watcher",
  "author": {
    "name": "Gulp Team",
    "email": "team@gulpjs.com",
    "url": "http://gulpjs.com/"
  },
  "bugs": {
    "url": "https://github.com/gulpjs/async-done/issues"
  },
  "contributors": [
    {
      "name": "Blaine Bublitz",
      "email": "blaine.bublitz@gmail.com"
    },
    {
      "name": "Pawel Kozlowski",
      "email": "pkozlowski.opensource@gmail.com"
    },
    {
      "name": "Matthew Podwysocki",
      "email": "matthew.podwysocki@gmail.com"
    }
  ],
  "dependencies": {
    "end-of-stream": "^1.1.0",
    "next-tick": "^1.0.0",
    "once": "^1.3.2",
    "stream-exhaust": "^1.0.1"
  },
  "description": "Force async using nextTick and normalize completion/errors for callbacks, promises, observables, child processes and streams.",
  "devDependencies": {
    "eslint": "^1.7.3",
    "eslint-config-gulp": "^2.0.0",
    "expect": "^1.19.0",
    "istanbul": "^0.4.3",
    "istanbul-coveralls": "^1.0.3",
    "jscs": "^2.3.5",
    "jscs-preset-gulp": "^1.0.0",
    "mocha": "^2.4.5",
    "rx": "^4.0.6",
    "through2": "^2.0.0",
    "when": "^3.7.3"
  },
  "directories": {},
  "dist": {
    "shasum": "ba4280da55a16e15f4bb8bf3a844a91878740e31",
    "tarball": "https://registry.npmjs.org/async-done/-/async-done-1.2.2.tgz"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "files": [
    "index.js",
    "LICENSE"
  ],
  "gitHead": "3191bec6b11ad7b891ceeb12285b58c95eedd443",
  "homepage": "https://github.com/gulpjs/async-done#readme",
  "keywords": [
    "promises",
    "callbacks",
    "observables",
    "streams",
    "end",
    "completion",
    "complete",
    "finish",
    "done",
    "async",
    "error handling"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "phated",
      "email": "blaine@iceddev.com"
    }
  ],
  "name": "async-done",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# async-done\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\nForce async using `nextTick` and normalize completion/errors for callbacks, promises, observables, child processes and streams.\n\n## Usage\n\n### Successful completion\n\n```js\nvar asyncDone = require('async-done');\n\nasyncDone(function(done){\n  // do async things\n  done(null, 2);\n}, function(error, result){\n  // `error` will be null on successful execution of the first function.\n  // `result` will be the result from the first function.\n});\n```\n\n### Failed completion\n\n```js\nvar asyncDone = require('async-done');\n\nasyncDone(function(done){\n  // do async things\n  done(new Error('Some Error Occurred'));\n}, function(error, result){\n  // `error` will be an error from the first function.\n  // `result` will be undefined on failed execution of the first function.\n});\n```\n\n## API\n\n### `asyncDone(fn, callback)`\n\nTakes a function to execute (`fn`) and a function to call on completion (`callback`).\n\n#### `fn([done])`\n\nOptionally takes a callback to call when async tasks are complete.\n\n#### Completion and Error Resolution\n\n* `Callback` (`done`) called\n  - Completion: called with null error\n  - Error: called with non-null error\n* `Stream` or `EventEmitter` returned\n  - Completion: [end-of-stream][end-of-stream] module\n  - Error: [domains][domains]\n  - __Note:__ Only actual streams are supported, not faux-streams; Therefore, modules like [`event-stream`][event-stream] are not supported.\n* `Child Process` returned\n  - Completion [end-of-stream][end-of-stream] module\n  - Error: [domains][domains]\n* `Promise` returned\n  - Completion: [onFulfilled][promise-onfulfilled] method called\n  - Error: [onRejected][promise-onrejected] method called\n* `Observable` returned\n  - Completion: [onCompleted][observable-subscribe] method called\n  - Error: [onError][observable-subscribe] method called\n\n__Warning:__ Sync tasks are __not supported__ and your function will never complete if the one of the above strategies is not used to signal completion. However, thrown errors will be caught by the domain.\n\n#### `callback(error, result)`\n\nIf an error doesn't occur in the execution of the `fn` function, the `callback` method will receive the results as its second argument. Note: Observable and some streams don't received any results.\n\nIf an error occurred in the execution of the `fn` function, The `callback` method will receive an error as its first argument.\n\nErrors can be caused by:\n\n* A thrown error\n* An error passed to a `done` callback\n* An `error` event emitted on a returned `Stream`, `EventEmitter` or `Child Process`\n* A rejection of a returned `Promise`\n* The `onError` handler being called on an `Observable`\n\n## License\n\nMIT\n\n[end-of-stream]: https://www.npmjs.com/package/end-of-stream\n[domains]: http://nodejs.org/api/domain.html\n[event-stream]: https://github.com/dominictarr/event-stream\n[promise-onfulfilled]: http://promisesaplus.com/#point-26\n[promise-onrejected]: http://promisesaplus.com/#point-30\n[observable-subscribe]: https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/subscribe.md\n\n[downloads-image]: http://img.shields.io/npm/dm/async-done.svg\n[npm-url]: https://www.npmjs.com/package/async-done\n[npm-image]: http://img.shields.io/npm/v/async-done.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/async-done\n[travis-image]: http://img.shields.io/travis/gulpjs/async-done.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/async-done\n[appveyor-image]: https://img.shields.io/appveyor/ci/gulpjs/async-done.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/async-done\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/async-done/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gulpjs/async-done.git"
  },
  "scripts": {
    "cover": "istanbul cover _mocha --report lcovonly",
    "coveralls": "npm run cover && istanbul-coveralls",
    "lint": "eslint . && jscs index.js test/",
    "pretest": "npm run lint",
    "test": "mocha --async-only"
  },
  "version": "1.2.2"
}
